---
alwaysApply: true
---

# VistA API MCP Server Project Structure

This project is a Model Context Protocol (MCP) server that interfaces with VistA healthcare systems.

## Main Entry Points

- [server.py](mdc:server.py) - Main MCP server entry point
- [http_server.py](mdc:http_server.py) - HTTP server variant
- [src/__main__.py](mdc:src/__main__.py) - Package entry point

## Core Architecture

- __API Clients__: [src/api_clients/](mdc:src/api_clients/) - VistA API communication layer
  - [vista_client.py](mdc:src/api_clients/vista_client.py) - Main VistA client implementation
- __Tools__: [src/tools/](mdc:src/tools/) - MCP tool implementations
  - [patient.py](mdc:src/tools/patient.py) - Patient-related operations
  - [clinical.py](mdc:src/tools/clinical.py) - Clinical data tools
  - [admin.py](mdc:src/tools/admin.py) - Administrative functions
  - [system.py](mdc:src/tools/system.py) - System utilities
- __Models__: [src/models.py](mdc:src/models.py) - Data models and schemas
- __Config__: [src/config.py](mdc:src/config.py) - Configuration management

## Mock Server for Development

- [mock_server/](mdc:mock_server/) - Full mock VistA API server for testing
- [mock_server/src/main.py](mdc:mock_server/src/main.py) - Mock server entry point
- [mock_server/src/rpc/handlers/](mdc:mock_server/src/rpc/handlers/) - Mock RPC handlers

## Documentation

- [docs/](mdc:docs/) - Comprehensive documentation
- [README.md](mdc:README.md) - Main project documentation
- [CONTRIBUTING.md](mdc:CONTRIBUTING.md) - Contribution guidelines

## Development Setup

- [pyproject.toml](mdc:pyproject.toml) - Python project configuration
- [docker-compose.yml](mdc:docker-compose.yml) - Docker setup for production
- [docker-compose.dev.yml](mdc:docker-compose.dev.yml) - Docker setup for development

---

# Project Structure Guide

The main entry point for the server is [server.py](mdc:server.py). Core source code is located in the [src/](mdc:src) directory, which contains modules for API clients, models, parsers, prompts, resources, and tools. The [mock_server/](mdc:mock_server) directory provides a mock implementation for testing, with its own source, configuration, and scripts. Documentation is available in the [docs/](mdc:docs) directory. Utility scripts are found in the [scripts/](mdc:scripts) directory. The project uses [pyproject.toml](mdc:pyproject.toml) for dependency and build configuration.
