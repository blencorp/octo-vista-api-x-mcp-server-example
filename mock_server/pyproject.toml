[project]
name = "vista-api-x-mock"
version = "2.1.0"
description = "Production-accurate mock server for Vista API X"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "pyjwt[crypto]>=2.8.0",
    "cryptography>=41.0.7",
    "boto3>=1.34.23",
    "aioboto3>=12.1.0",
    "python-dateutil>=2.8.2",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.1",
    "python-json-logger>=2.0.7",
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "httpx>=0.26.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.11",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "types-pyyaml>=6.0.0",
    "types-aiofiles>=23.0.0",
]

[project.scripts]
vista-mock = "src.main:run"
generate-keys = "scripts.generate_rsa_keys:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 120
exclude = [".git", ".venv", "__pycache__", "build", "dist"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by formatter)
    "B008", # Do not perform function calls in argument defaults
    "B904", # Allow raising without from in except
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002"] # Allow unused arguments in tests
"src/data/*" = ["E501"]          # Allow long lines in test data

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.black]
line-length = 120
target-version = ["py311", "py312"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
pythonpath = ["."]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
# Start with less strict settings
allow_redefinition = true
allow_untyped_globals = true
implicit_reexport = true
follow_imports = "normal"

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "boto3.*",
    "botocore.*",
    "aioboto3.*",
    "pyjwt.*",
    "jose.*",
]
ignore_missing_imports = true

[dependency-groups]
dev = ["black>=25.1.0", "ruff>=0.12.0"]
